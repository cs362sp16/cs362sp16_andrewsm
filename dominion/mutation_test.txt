10: /* MUTANT (rep_op) */        if (*(int*)a <= *(int*)b)
10: /* MUTANT (rep_op) */        if (*(int*)a < *(int*)b)
10: /* MUTANT (rep_op) */        if (*(int*)a >= *(int*)b)
10: /* MUTANT (rep_op) */        if (*(int*)a == *(int*)b)
10: /* MUTANT (rep_op) */        if (*(int*)a != *(int*)b)
10: /* MUTANT (negate) */        if(! (*(int*)a > *(int*)b))
11: /* MUTANT (rep_const) */                return 0;
11: /* MUTANT (rep_const) */                return -1;
11: /* MUTANT (rep_const) */                return ((1)+1);
12: /* MUTANT (rep_op) */        if (*(int*)a <= *(int*)b)
12: /* MUTANT (rep_op) */        if (*(int*)a > *(int*)b)
12: /* MUTANT (rep_op) */        if (*(int*)a >= *(int*)b)
12: /* MUTANT (rep_op) */        if (*(int*)a == *(int*)b)
12: /* MUTANT (rep_op) */        if (*(int*)a != *(int*)b)
12: /* MUTANT (negate) */        if(! (*(int*)a < *(int*)b))
13: /* MUTANT (rep_const) */                return 0;
13: /* MUTANT (rep_const) */                return 1;
13: /* MUTANT (rep_const) */                return ((-1)+1);
13: /* MUTANT (rep_const) */                return ((-1)-1);
14: /* MUTANT (del_stmt) */ /*         return 0; */ 
14: /* MUTANT (rep_const) */        return 1;
14: /* MUTANT (rep_const) */        return -1;
18: /* MUTANT (del_stmt) */ /*         struct gameState* g = malloc(sizeof(struct gameState)); */ 
19: /* MUTANT (del_stmt) */ /*         return g; */ 
24: /* MUTANT (del_stmt) */ /*         int* k = malloc(10 * sizeof(int)); */ 
24: /* MUTANT (rep_const) */        int* k = malloc(0 * sizeof(int));
24: /* MUTANT (rep_const) */        int* k = malloc(1 * sizeof(int));
24: /* MUTANT (rep_const) */        int* k = malloc(-1 * sizeof(int));
24: /* MUTANT (rep_const) */        int* k = malloc(((10)+1) * sizeof(int));
24: /* MUTANT (rep_const) */        int* k = malloc(((10)-1) * sizeof(int));
25: /* MUTANT (del_stmt) */ /*         k[0] = k1; */ 
25: /* MUTANT (rep_const) */        k[1] = k1;
25: /* MUTANT (rep_const) */        k[-1] = k1;
26: /* MUTANT (del_stmt) */ /*         k[1] = k2; */ 
26: /* MUTANT (rep_const) */        k[0] = k2;
26: /* MUTANT (rep_const) */        k[-1] = k2;
26: /* MUTANT (rep_const) */        k[((1)+1)] = k2;
27: /* MUTANT (del_stmt) */ /*         k[2] = k3; */ 
27: /* MUTANT (rep_const) */        k[0] = k3;
27: /* MUTANT (rep_const) */        k[1] = k3;
27: /* MUTANT (rep_const) */        k[-1] = k3;
27: /* MUTANT (rep_const) */        k[((2)+1)] = k3;
27: /* MUTANT (rep_const) */        k[((2)-1)] = k3;
28: /* MUTANT (del_stmt) */ /*         k[3] = k4; */ 
28: /* MUTANT (rep_const) */        k[0] = k4;
28: /* MUTANT (rep_const) */        k[1] = k4;
28: /* MUTANT (rep_const) */        k[-1] = k4;
28: /* MUTANT (rep_const) */        k[((3)+1)] = k4;
28: /* MUTANT (rep_const) */        k[((3)-1)] = k4;
29: /* MUTANT (del_stmt) */ /*         k[4] = k5; */ 
29: /* MUTANT (rep_const) */        k[0] = k5;
29: /* MUTANT (rep_const) */        k[1] = k5;
29: /* MUTANT (rep_const) */        k[-1] = k5;
29: /* MUTANT (rep_const) */        k[((4)+1)] = k5;
29: /* MUTANT (rep_const) */        k[((4)-1)] = k5;
30: /* MUTANT (del_stmt) */ /*         k[5] = k6; */ 
30: /* MUTANT (rep_const) */        k[0] = k6;
30: /* MUTANT (rep_const) */        k[1] = k6;
30: /* MUTANT (rep_const) */        k[-1] = k6;
30: /* MUTANT (rep_const) */        k[((5)+1)] = k6;
30: /* MUTANT (rep_const) */        k[((5)-1)] = k6;
31: /* MUTANT (del_stmt) */ /*         k[6] = k7; */ 
31: /* MUTANT (rep_const) */        k[0] = k7;
31: /* MUTANT (rep_const) */        k[1] = k7;
31: /* MUTANT (rep_const) */        k[-1] = k7;
31: /* MUTANT (rep_const) */        k[((6)+1)] = k7;
31: /* MUTANT (rep_const) */        k[((6)-1)] = k7;
32: /* MUTANT (del_stmt) */ /*         k[7] = k8; */ 
32: /* MUTANT (rep_const) */        k[0] = k8;
32: /* MUTANT (rep_const) */        k[1] = k8;
32: /* MUTANT (rep_const) */        k[-1] = k8;
32: /* MUTANT (rep_const) */        k[((7)+1)] = k8;
32: /* MUTANT (rep_const) */        k[((7)-1)] = k8;
33: /* MUTANT (del_stmt) */ /*         k[8] = k9; */ 
33: /* MUTANT (rep_const) */        k[0] = k9;
33: /* MUTANT (rep_const) */        k[1] = k9;
33: /* MUTANT (rep_const) */        k[-1] = k9;
33: /* MUTANT (rep_const) */        k[((8)+1)] = k9;
33: /* MUTANT (rep_const) */        k[((8)-1)] = k9;
34: /* MUTANT (del_stmt) */ /*         k[9] = k10; */ 
34: /* MUTANT (rep_const) */        k[0] = k10;
34: /* MUTANT (rep_const) */        k[1] = k10;
34: /* MUTANT (rep_const) */        k[-1] = k10;
34: /* MUTANT (rep_const) */        k[((9)+1)] = k10;
34: /* MUTANT (rep_const) */        k[((9)-1)] = k10;
35: /* MUTANT (del_stmt) */ /*         return k; */ 
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[0], int randomSeed,
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[1], int randomSeed,
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[-1], int randomSeed,
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[((10)+1)], int randomSeed,
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[((10)-1)], int randomSeed,
41: /* MUTANT (del_stmt) */ /*         int i; */ 
42: /* MUTANT (del_stmt) */ /*         int j; */ 
43: /* MUTANT (del_stmt) */ /*         int it; */ 
45: /* MUTANT (del_stmt) */ /*         SelectStream(1); */ 
45: /* MUTANT (rep_const) */        SelectStream(0);
45: /* MUTANT (rep_const) */        SelectStream(-1);
45: /* MUTANT (rep_const) */        SelectStream(((1)+1));
46: /* MUTANT (del_stmt) */ /*         PutSeed((long)randomSeed); */ 
49: /* MUTANT (rep_op) */        if (numPlayers <= MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */        if (numPlayers < MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */        if (numPlayers >= MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */        if (numPlayers == MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */        if (numPlayers != MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */        if (numPlayers > MAX_PLAYERS && numPlayers < 2)
49: /* MUTANT (rep_op) */        if (numPlayers > MAX_PLAYERS || numPlayers <= 2)
49: /* MUTANT (rep_op) */        if (numPlayers > MAX_PLAYERS || numPlayers > 2)
49: /* MUTANT (rep_op) */        if (numPlayers > MAX_PLAYERS || numPlayers >= 2)
49: /* MUTANT (rep_op) */        if (numPlayers > MAX_PLAYERS || numPlayers == 2)
49: /* MUTANT (rep_op) */        if (numPlayers > MAX_PLAYERS || numPlayers != 2)
49: /* MUTANT (rep_const) */        if (numPlayers > MAX_PLAYERS || numPlayers < 0)
49: /* MUTANT (rep_const) */        if (numPlayers > MAX_PLAYERS || numPlayers < 1)
49: /* MUTANT (rep_const) */        if (numPlayers > MAX_PLAYERS || numPlayers < -1)
49: /* MUTANT (rep_const) */        if (numPlayers > MAX_PLAYERS || numPlayers < ((2)+1))
49: /* MUTANT (rep_const) */        if (numPlayers > MAX_PLAYERS || numPlayers < ((2)-1))
49: /* MUTANT (negate) */        if(! (numPlayers > MAX_PLAYERS || numPlayers < 2))
51: /* MUTANT (del_stmt) */ /*                 return -1; */ 
51: /* MUTANT (rep_const) */                return 0;
51: /* MUTANT (rep_const) */                return 1;
51: /* MUTANT (rep_const) */                return ((-1)+1);
51: /* MUTANT (rep_const) */                return ((-1)-1);
58: /* MUTANT (rep_op) */        for (i = 0; i <= 10; i++)
58: /* MUTANT (rep_op) */        for (i = 0; i > 10; i++)
58: /* MUTANT (rep_op) */        for (i = 0; i >= 10; i++)
58: /* MUTANT (rep_op) */        for (i = 0; i == 10; i++)
58: /* MUTANT (rep_op) */        for (i = 0; i != 10; i++)
58: /* MUTANT (rep_op) */        for (i = 0; i < 10; i--)
58: /* MUTANT (rep_const) */        for (i = 1; i < 10; i++)
58: /* MUTANT (rep_const) */        for (i = -1; i < 10; i++)
58: /* MUTANT (rep_const) */        for (i = 0; i < 0; i++)
58: /* MUTANT (rep_const) */        for (i = 0; i < 1; i++)
58: /* MUTANT (rep_const) */        for (i = 0; i < -1; i++)
58: /* MUTANT (rep_const) */        for (i = 0; i < ((10)+1); i++)
58: /* MUTANT (rep_const) */        for (i = 0; i < ((10)-1); i++)
60: /* MUTANT (rep_op) */                for (j = 0; j <= 10; j++)
60: /* MUTANT (rep_op) */                for (j = 0; j > 10; j++)
60: /* MUTANT (rep_op) */                for (j = 0; j >= 10; j++)
60: /* MUTANT (rep_op) */                for (j = 0; j == 10; j++)
60: /* MUTANT (rep_op) */                for (j = 0; j != 10; j++)
60: /* MUTANT (rep_op) */                for (j = 0; j < 10; j--)
60: /* MUTANT (rep_const) */                for (j = 1; j < 10; j++)
60: /* MUTANT (rep_const) */                for (j = -1; j < 10; j++)
60: /* MUTANT (rep_const) */                for (j = 0; j < 0; j++)
60: /* MUTANT (rep_const) */                for (j = 0; j < 1; j++)
60: /* MUTANT (rep_const) */                for (j = 0; j < -1; j++)
60: /* MUTANT (rep_const) */                for (j = 0; j < ((10)+1); j++)
60: /* MUTANT (rep_const) */                for (j = 0; j < ((10)-1); j++)
62: /* MUTANT (rep_op) */                        if (j == i && kingdomCards[j] == kingdomCards[i])
62: /* MUTANT (rep_op) */                        if (j != i || kingdomCards[j] == kingdomCards[i])
62: /* MUTANT (rep_op) */                        if (j != i && kingdomCards[j] != kingdomCards[i])
62: /* MUTANT (negate) */                        if(! (j != i && kingdomCards[j] == kingdomCards[i]))
64: /* MUTANT (del_stmt) */ /*                                 return -1; */ 
64: /* MUTANT (rep_const) */                                return 0;
64: /* MUTANT (rep_const) */                                return 1;
64: /* MUTANT (rep_const) */                                return ((-1)+1);
64: /* MUTANT (rep_const) */                                return ((-1)-1);
74: /* MUTANT (rep_op) */        if (numPlayers != 2)
74: /* MUTANT (rep_const) */        if (numPlayers == 0)
74: /* MUTANT (rep_const) */        if (numPlayers == 1)
74: /* MUTANT (rep_const) */        if (numPlayers == -1)
74: /* MUTANT (rep_const) */        if (numPlayers == ((2)+1))
74: /* MUTANT (rep_const) */        if (numPlayers == ((2)-1))
74: /* MUTANT (negate) */        if(! (numPlayers == 2))
76: /* MUTANT (del_stmt) */ /*                 state->supplyCount[curse] = 10; */ 
76: /* MUTANT (rep_const) */                state->supplyCount[curse] = 0;
76: /* MUTANT (rep_const) */                state->supplyCount[curse] = 1;
76: /* MUTANT (rep_const) */                state->supplyCount[curse] = -1;
76: /* MUTANT (rep_const) */                state->supplyCount[curse] = ((10)+1);
76: /* MUTANT (rep_const) */                state->supplyCount[curse] = ((10)-1);
78: /* MUTANT (rep_op) */        else if (numPlayers != 3)
78: /* MUTANT (rep_const) */        else if (numPlayers == 0)
78: /* MUTANT (rep_const) */        else if (numPlayers == 1)
78: /* MUTANT (rep_const) */        else if (numPlayers == -1)
78: /* MUTANT (rep_const) */        else if (numPlayers == ((3)+1))
78: /* MUTANT (rep_const) */        else if (numPlayers == ((3)-1))
78: /* MUTANT (negate) */        else if(! (numPlayers == 3))
80: /* MUTANT (del_stmt) */ /*                 state->supplyCount[curse] = 20; */ 
80: /* MUTANT (rep_const) */                state->supplyCount[curse] = 0;
80: /* MUTANT (rep_const) */                state->supplyCount[curse] = 1;
80: /* MUTANT (rep_const) */                state->supplyCount[curse] = -1;
80: /* MUTANT (rep_const) */                state->supplyCount[curse] = ((20)+1);
80: /* MUTANT (rep_const) */                state->supplyCount[curse] = ((20)-1);
84: /* MUTANT (del_stmt) */ /*                 state->supplyCount[curse] = 30; */ 
84: /* MUTANT (rep_const) */                state->supplyCount[curse] = 0;
84: /* MUTANT (rep_const) */                state->supplyCount[curse] = 1;
84: /* MUTANT (rep_const) */                state->supplyCount[curse] = -1;
84: /* MUTANT (rep_const) */                state->supplyCount[curse] = ((30)+1);
84: /* MUTANT (rep_const) */                state->supplyCount[curse] = ((30)-1);
88: /* MUTANT (rep_op) */        if (numPlayers != 2)
88: /* MUTANT (rep_const) */        if (numPlayers == 0)
88: /* MUTANT (rep_const) */        if (numPlayers == 1)
88: /* MUTANT (rep_const) */        if (numPlayers == -1)
88: /* MUTANT (rep_const) */        if (numPlayers == ((2)+1))
88: /* MUTANT (rep_const) */        if (numPlayers == ((2)-1))
88: /* MUTANT (negate) */        if(! (numPlayers == 2))
90: /* MUTANT (del_stmt) */ /*                 state->supplyCount[estate] = 8; */ 
90: /* MUTANT (rep_const) */                state->supplyCount[estate] = 0;
90: /* MUTANT (rep_const) */                state->supplyCount[estate] = 1;
90: /* MUTANT (rep_const) */                state->supplyCount[estate] = -1;
90: /* MUTANT (rep_const) */                state->supplyCount[estate] = ((8)+1);
90: /* MUTANT (rep_const) */                state->supplyCount[estate] = ((8)-1);
91: /* MUTANT (del_stmt) */ /*                 state->supplyCount[duchy] = 8; */ 
91: /* MUTANT (rep_const) */                state->supplyCount[duchy] = 0;
91: /* MUTANT (rep_const) */                state->supplyCount[duchy] = 1;
91: /* MUTANT (rep_const) */                state->supplyCount[duchy] = -1;
91: /* MUTANT (rep_const) */                state->supplyCount[duchy] = ((8)+1);
91: /* MUTANT (rep_const) */                state->supplyCount[duchy] = ((8)-1);
92: /* MUTANT (del_stmt) */ /*                 state->supplyCount[province] = 8; */ 
92: /* MUTANT (rep_const) */                state->supplyCount[province] = 0;
92: /* MUTANT (rep_const) */                state->supplyCount[province] = 1;
92: /* MUTANT (rep_const) */                state->supplyCount[province] = -1;
92: /* MUTANT (rep_const) */                state->supplyCount[province] = ((8)+1);
92: /* MUTANT (rep_const) */                state->supplyCount[province] = ((8)-1);
96: /* MUTANT (del_stmt) */ /*                 state->supplyCount[estate] = 12; */ 
96: /* MUTANT (rep_const) */                state->supplyCount[estate] = 0;
96: /* MUTANT (rep_const) */                state->supplyCount[estate] = 1;
96: /* MUTANT (rep_const) */                state->supplyCount[estate] = -1;
96: /* MUTANT (rep_const) */                state->supplyCount[estate] = ((12)+1);
96: /* MUTANT (rep_const) */                state->supplyCount[estate] = ((12)-1);
97: /* MUTANT (del_stmt) */ /*                 state->supplyCount[duchy] = 12; */ 
97: /* MUTANT (rep_const) */                state->supplyCount[duchy] = 0;
97: /* MUTANT (rep_const) */                state->supplyCount[duchy] = 1;
97: /* MUTANT (rep_const) */                state->supplyCount[duchy] = -1;
97: /* MUTANT (rep_const) */                state->supplyCount[duchy] = ((12)+1);
97: /* MUTANT (rep_const) */                state->supplyCount[duchy] = ((12)-1);
98: /* MUTANT (del_stmt) */ /*                 state->supplyCount[province] = 12; */ 
98: /* MUTANT (rep_const) */                state->supplyCount[province] = 0;
98: /* MUTANT (rep_const) */                state->supplyCount[province] = 1;
98: /* MUTANT (rep_const) */                state->supplyCount[province] = -1;
98: /* MUTANT (rep_const) */                state->supplyCount[province] = ((12)+1);
98: /* MUTANT (rep_const) */                state->supplyCount[province] = ((12)-1);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = 0 - (7 * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = 1 - (7 * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = -1 - (7 * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = ((60)+1) - (7 * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = ((60)-1) - (7 * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = 60 - (0 * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = 60 - (1 * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = 60 - (-1 * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = 60 - (((7)+1) * numPlayers);
102: /* MUTANT (rep_const) */        state->supplyCount[copper] = 60 - (((7)-1) * numPlayers);
103: /* MUTANT (del_stmt) */ /*         state->supplyCount[silver] = 40; */ 
103: /* MUTANT (rep_const) */        state->supplyCount[silver] = 0;
103: /* MUTANT (rep_const) */        state->supplyCount[silver] = 1;
103: /* MUTANT (rep_const) */        state->supplyCount[silver] = -1;
103: /* MUTANT (rep_const) */        state->supplyCount[silver] = ((40)+1);
103: /* MUTANT (rep_const) */        state->supplyCount[silver] = ((40)-1);
104: /* MUTANT (del_stmt) */ /*         state->supplyCount[gold] = 30; */ 
104: /* MUTANT (rep_const) */        state->supplyCount[gold] = 0;
104: /* MUTANT (rep_const) */        state->supplyCount[gold] = 1;
104: /* MUTANT (rep_const) */        state->supplyCount[gold] = -1;
104: /* MUTANT (rep_const) */        state->supplyCount[gold] = ((30)+1);
104: /* MUTANT (rep_const) */        state->supplyCount[gold] = ((30)-1);
107: /* MUTANT (rep_op) */        for (i = adventurer; i < treasure_map; i++)  //loop all cards
107: /* MUTANT (rep_op) */        for (i = adventurer; i > treasure_map; i++)  //loop all cards
107: /* MUTANT (rep_op) */        for (i = adventurer; i >= treasure_map; i++)  //loop all cards
107: /* MUTANT (rep_op) */        for (i = adventurer; i == treasure_map; i++)  //loop all cards
107: /* MUTANT (rep_op) */        for (i = adventurer; i != treasure_map; i++)  //loop all cards
107: /* MUTANT (rep_op) */        for (i = adventurer; i <= treasure_map; i--)  //loop all cards
109: /* MUTANT (rep_op) */                for (j = 0; j <= 10; j++)    //loop chosen cards
109: /* MUTANT (rep_op) */                for (j = 0; j > 10; j++)    //loop chosen cards
109: /* MUTANT (rep_op) */                for (j = 0; j >= 10; j++)    //loop chosen cards
109: /* MUTANT (rep_op) */                for (j = 0; j == 10; j++)    //loop chosen cards
109: /* MUTANT (rep_op) */                for (j = 0; j != 10; j++)    //loop chosen cards
109: /* MUTANT (rep_op) */                for (j = 0; j < 10; j--)    //loop chosen cards
109: /* MUTANT (rep_const) */                for (j = 1; j < 10; j++)    //loop chosen cards
109: /* MUTANT (rep_const) */                for (j = -1; j < 10; j++)    //loop chosen cards
109: /* MUTANT (rep_const) */                for (j = 0; j < 0; j++)    //loop chosen cards
109: /* MUTANT (rep_const) */                for (j = 0; j < 1; j++)    //loop chosen cards
109: /* MUTANT (rep_const) */                for (j = 0; j < -1; j++)    //loop chosen cards
109: /* MUTANT (rep_const) */                for (j = 0; j < ((10)+1); j++)    //loop chosen cards
109: /* MUTANT (rep_const) */                for (j = 0; j < ((10)-1); j++)    //loop chosen cards
111: /* MUTANT (rep_op) */                        if (kingdomCards[j] != i)
111: /* MUTANT (negate) */                        if(! (kingdomCards[j] == i))
114: /* MUTANT (rep_op) */                                if (kingdomCards[j] != great_hall || kingdomCards[j] == gardens)
114: /* MUTANT (rep_op) */                                if (kingdomCards[j] == great_hall && kingdomCards[j] == gardens)
114: /* MUTANT (rep_op) */                                if (kingdomCards[j] == great_hall || kingdomCards[j] != gardens)
114: /* MUTANT (negate) */                                if(! (kingdomCards[j] == great_hall || kingdomCards[j] == gardens))
116: /* MUTANT (rep_op) */                                        if (numPlayers != 2) {
116: /* MUTANT (rep_const) */                                        if (numPlayers == 0) {
116: /* MUTANT (rep_const) */                                        if (numPlayers == 1) {
116: /* MUTANT (rep_const) */                                        if (numPlayers == -1) {
116: /* MUTANT (rep_const) */                                        if (numPlayers == ((2)+1)) {
116: /* MUTANT (rep_const) */                                        if (numPlayers == ((2)-1)) {
116: /* MUTANT (negate) */                                        if(! (numPlayers == 2)) {
117: /* MUTANT (del_stmt) */ /*                                                 state->supplyCount[i] = 8; */ 
117: /* MUTANT (rep_const) */                                                state->supplyCount[i] = 0;
117: /* MUTANT (rep_const) */                                                state->supplyCount[i] = 1;
117: /* MUTANT (rep_const) */                                                state->supplyCount[i] = -1;
117: /* MUTANT (rep_const) */                                                state->supplyCount[i] = ((8)+1);
117: /* MUTANT (rep_const) */                                                state->supplyCount[i] = ((8)-1);
119: /* MUTANT (rep_const) */                                        else{ state->supplyCount[i] = 0; }
119: /* MUTANT (rep_const) */                                        else{ state->supplyCount[i] = 1; }
119: /* MUTANT (rep_const) */                                        else{ state->supplyCount[i] = -1; }
119: /* MUTANT (rep_const) */                                        else{ state->supplyCount[i] = ((12)+1); }
119: /* MUTANT (rep_const) */                                        else{ state->supplyCount[i] = ((12)-1); }
123: /* MUTANT (del_stmt) */ /*                                         state->supplyCount[i] = 10; */ 
123: /* MUTANT (rep_const) */                                        state->supplyCount[i] = 0;
123: /* MUTANT (rep_const) */                                        state->supplyCount[i] = 1;
123: /* MUTANT (rep_const) */                                        state->supplyCount[i] = -1;
123: /* MUTANT (rep_const) */                                        state->supplyCount[i] = ((10)+1);
123: /* MUTANT (rep_const) */                                        state->supplyCount[i] = ((10)-1);
129: /* MUTANT (del_stmt) */ /*                                 state->supplyCount[i] = -1; */ 
129: /* MUTANT (rep_const) */                                state->supplyCount[i] = 0;
129: /* MUTANT (rep_const) */                                state->supplyCount[i] = 1;
129: /* MUTANT (rep_const) */                                state->supplyCount[i] = ((-1)+1);
129: /* MUTANT (rep_const) */                                state->supplyCount[i] = ((-1)-1);
139: /* MUTANT (rep_op) */        for (i = 0; i <= numPlayers; i++)
139: /* MUTANT (rep_op) */        for (i = 0; i > numPlayers; i++)
139: /* MUTANT (rep_op) */        for (i = 0; i >= numPlayers; i++)
139: /* MUTANT (rep_op) */        for (i = 0; i == numPlayers; i++)
139: /* MUTANT (rep_op) */        for (i = 0; i != numPlayers; i++)
139: /* MUTANT (rep_op) */        for (i = 0; i < numPlayers; i--)
139: /* MUTANT (rep_const) */        for (i = 1; i < numPlayers; i++)
139: /* MUTANT (rep_const) */        for (i = -1; i < numPlayers; i++)
141: /* MUTANT (del_stmt) */ /*                 state->deckCount[i] = 0; */ 
141: /* MUTANT (rep_const) */                state->deckCount[i] = 1;
141: /* MUTANT (rep_const) */                state->deckCount[i] = -1;
142: /* MUTANT (rep_op) */                for (j = 0; j <= 3; j++)
142: /* MUTANT (rep_op) */                for (j = 0; j > 3; j++)
142: /* MUTANT (rep_op) */                for (j = 0; j >= 3; j++)
142: /* MUTANT (rep_op) */                for (j = 0; j == 3; j++)
142: /* MUTANT (rep_op) */                for (j = 0; j != 3; j++)
142: /* MUTANT (rep_op) */                for (j = 0; j < 3; j--)
142: /* MUTANT (rep_const) */                for (j = 1; j < 3; j++)
142: /* MUTANT (rep_const) */                for (j = -1; j < 3; j++)
142: /* MUTANT (rep_const) */                for (j = 0; j < 0; j++)
142: /* MUTANT (rep_const) */                for (j = 0; j < 1; j++)
142: /* MUTANT (rep_const) */                for (j = 0; j < -1; j++)
142: /* MUTANT (rep_const) */                for (j = 0; j < ((3)+1); j++)
142: /* MUTANT (rep_const) */                for (j = 0; j < ((3)-1); j++)
144: /* MUTANT (del_stmt) */ /*                         state->deck[i][j] = estate; */ 
145: /* MUTANT (del_stmt) */ /*                         state->deckCount[i]++; */ 
145: /* MUTANT (rep_op) */                        state->deckCount[i]--;
147: /* MUTANT (rep_op) */                for (j = 3; j <= 10; j++)
147: /* MUTANT (rep_op) */                for (j = 3; j > 10; j++)
147: /* MUTANT (rep_op) */                for (j = 3; j >= 10; j++)
147: /* MUTANT (rep_op) */                for (j = 3; j == 10; j++)
147: /* MUTANT (rep_op) */                for (j = 3; j != 10; j++)
147: /* MUTANT (rep_op) */                for (j = 3; j < 10; j--)
147: /* MUTANT (rep_const) */                for (j = 0; j < 10; j++)
147: /* MUTANT (rep_const) */                for (j = 1; j < 10; j++)
147: /* MUTANT (rep_const) */                for (j = -1; j < 10; j++)
147: /* MUTANT (rep_const) */                for (j = ((3)+1); j < 10; j++)
147: /* MUTANT (rep_const) */                for (j = ((3)-1); j < 10; j++)
147: /* MUTANT (rep_const) */                for (j = 3; j < 0; j++)
147: /* MUTANT (rep_const) */                for (j = 3; j < 1; j++)
147: /* MUTANT (rep_const) */                for (j = 3; j < -1; j++)
147: /* MUTANT (rep_const) */                for (j = 3; j < ((10)+1); j++)
147: /* MUTANT (rep_const) */                for (j = 3; j < ((10)-1); j++)
149: /* MUTANT (del_stmt) */ /*                         state->deck[i][j] = copper; */ 
150: /* MUTANT (del_stmt) */ /*                         state->deckCount[i]++; */ 
150: /* MUTANT (rep_op) */                        state->deckCount[i]--;
155: /* MUTANT (rep_op) */        for (i = 0; i <= numPlayers; i++)
155: /* MUTANT (rep_op) */        for (i = 0; i > numPlayers; i++)
155: /* MUTANT (rep_op) */        for (i = 0; i >= numPlayers; i++)
155: /* MUTANT (rep_op) */        for (i = 0; i == numPlayers; i++)
155: /* MUTANT (rep_op) */        for (i = 0; i != numPlayers; i++)
155: /* MUTANT (rep_op) */        for (i = 0; i < numPlayers; i--)
155: /* MUTANT (rep_const) */        for (i = 1; i < numPlayers; i++)
155: /* MUTANT (rep_const) */        for (i = -1; i < numPlayers; i++)
157: /* MUTANT (rep_op) */                if ( shuffle(i, state) <= 0 )
157: /* MUTANT (rep_op) */                if ( shuffle(i, state) > 0 )
157: /* MUTANT (rep_op) */                if ( shuffle(i, state) >= 0 )
157: /* MUTANT (rep_op) */                if ( shuffle(i, state) == 0 )
157: /* MUTANT (rep_op) */                if ( shuffle(i, state) != 0 )
157: /* MUTANT (rep_const) */                if ( shuffle(i, state) < 1 )
157: /* MUTANT (rep_const) */                if ( shuffle(i, state) < -1 )
157: /* MUTANT (negate) */                if(! ( shuffle(i, state) < 0 ))
159: /* MUTANT (del_stmt) */ /*                         return -1; */ 
159: /* MUTANT (rep_const) */                        return 0;
159: /* MUTANT (rep_const) */                        return 1;
159: /* MUTANT (rep_const) */                        return ((-1)+1);
159: /* MUTANT (rep_const) */                        return ((-1)-1);
164: /* MUTANT (rep_op) */        for (i = 0; i <= numPlayers; i++)
164: /* MUTANT (rep_op) */        for (i = 0; i > numPlayers; i++)
164: /* MUTANT (rep_op) */        for (i = 0; i >= numPlayers; i++)
164: /* MUTANT (rep_op) */        for (i = 0; i == numPlayers; i++)
164: /* MUTANT (rep_op) */        for (i = 0; i != numPlayers; i++)
164: /* MUTANT (rep_op) */        for (i = 0; i < numPlayers; i--)
164: /* MUTANT (rep_const) */        for (i = 1; i < numPlayers; i++)
164: /* MUTANT (rep_const) */        for (i = -1; i < numPlayers; i++)
167: /* MUTANT (del_stmt) */ /*                 state->handCount[i] = 0; */ 
167: /* MUTANT (rep_const) */                state->handCount[i] = 1;
167: /* MUTANT (rep_const) */                state->handCount[i] = -1;
168: /* MUTANT (del_stmt) */ /*                 state->discardCount[i] = 0; */ 
168: /* MUTANT (rep_const) */                state->discardCount[i] = 1;
168: /* MUTANT (rep_const) */                state->discardCount[i] = -1;
177: /* MUTANT (rep_op) */        for (i = 0; i < treasure_map; i++)
177: /* MUTANT (rep_op) */        for (i = 0; i > treasure_map; i++)
177: /* MUTANT (rep_op) */        for (i = 0; i >= treasure_map; i++)
177: /* MUTANT (rep_op) */        for (i = 0; i == treasure_map; i++)
177: /* MUTANT (rep_op) */        for (i = 0; i != treasure_map; i++)
177: /* MUTANT (rep_op) */        for (i = 0; i <= treasure_map; i--)
177: /* MUTANT (rep_const) */        for (i = 1; i <= treasure_map; i++)
177: /* MUTANT (rep_const) */        for (i = -1; i <= treasure_map; i++)
179: /* MUTANT (del_stmt) */ /*                 state->embargoTokens[i] = 0; */ 
179: /* MUTANT (rep_const) */                state->embargoTokens[i] = 1;
179: /* MUTANT (rep_const) */                state->embargoTokens[i] = -1;
183: /* MUTANT (rep_const) */        state->outpostPlayed = 1;
183: /* MUTANT (rep_const) */        state->outpostPlayed = -1;
184: /* MUTANT (del_stmt) */ /*         state->phase = 0; */ 
184: /* MUTANT (rep_const) */        state->phase = 1;
184: /* MUTANT (rep_const) */        state->phase = -1;
185: /* MUTANT (del_stmt) */ /*         state->numActions = 1; */ 
185: /* MUTANT (rep_const) */        state->numActions = 0;
185: /* MUTANT (rep_const) */        state->numActions = -1;
185: /* MUTANT (rep_const) */        state->numActions = ((1)+1);
186: /* MUTANT (del_stmt) */ /*         state->numBuys = 1; */ 
186: /* MUTANT (rep_const) */        state->numBuys = 0;
186: /* MUTANT (rep_const) */        state->numBuys = -1;
186: /* MUTANT (rep_const) */        state->numBuys = ((1)+1);
187: /* MUTANT (del_stmt) */ /*         state->playedCardCount = 0; */ 
187: /* MUTANT (rep_const) */        state->playedCardCount = 1;
187: /* MUTANT (rep_const) */        state->playedCardCount = -1;
188: /* MUTANT (del_stmt) */ /*         state->whoseTurn = 0; */ 
188: /* MUTANT (rep_const) */        state->whoseTurn = 1;
188: /* MUTANT (rep_const) */        state->whoseTurn = -1;
189: /* MUTANT (del_stmt) */ /*         state->handCount[state->whoseTurn] = 0; */ 
189: /* MUTANT (rep_const) */        state->handCount[state->whoseTurn] = 1;
189: /* MUTANT (rep_const) */        state->handCount[state->whoseTurn] = -1;
193: /* MUTANT (rep_op) */        for (it = 0; it <= 5; it++) {
193: /* MUTANT (rep_op) */        for (it = 0; it > 5; it++) {
193: /* MUTANT (rep_op) */        for (it = 0; it >= 5; it++) {
193: /* MUTANT (rep_op) */        for (it = 0; it == 5; it++) {
193: /* MUTANT (rep_op) */        for (it = 0; it != 5; it++) {
193: /* MUTANT (rep_op) */        for (it = 0; it < 5; it--) {
193: /* MUTANT (rep_const) */        for (it = 1; it < 5; it++) {
193: /* MUTANT (rep_const) */        for (it = -1; it < 5; it++) {
193: /* MUTANT (rep_const) */        for (it = 0; it < 0; it++) {
193: /* MUTANT (rep_const) */        for (it = 0; it < 1; it++) {
193: /* MUTANT (rep_const) */        for (it = 0; it < -1; it++) {
193: /* MUTANT (rep_const) */        for (it = 0; it < ((5)+1); it++) {
193: /* MUTANT (rep_const) */        for (it = 0; it < ((5)-1); it++) {
194: /* MUTANT (del_stmt) */ /*                 drawCard(state->whoseTurn, state); */ 
197: /* MUTANT (rep_const) */        updateCoins(state->whoseTurn, state, 1);
197: /* MUTANT (rep_const) */        updateCoins(state->whoseTurn, state, -1);
199: /* MUTANT (del_stmt) */ /*         return 0; */ 
199: /* MUTANT (rep_const) */        return 1;
199: /* MUTANT (rep_const) */        return -1;
205: /* MUTANT (del_stmt) */ /*         int newDeck[MAX_DECK]; */ 
206: /* MUTANT (del_stmt) */ /*         int newDeckPos = 0; */ 
206: /* MUTANT (rep_const) */        int newDeckPos = 1;
206: /* MUTANT (rep_const) */        int newDeckPos = -1;
207: /* MUTANT (del_stmt) */ /*         int card; */ 
208: /* MUTANT (del_stmt) */ /*         int i; */ 
210: /* MUTANT (rep_op) */        if (state->deckCount[player] <= 1)
210: /* MUTANT (rep_op) */        if (state->deckCount[player] > 1)
210: /* MUTANT (rep_op) */        if (state->deckCount[player] >= 1)
210: /* MUTANT (rep_op) */        if (state->deckCount[player] == 1)
210: /* MUTANT (rep_op) */        if (state->deckCount[player] != 1)
210: /* MUTANT (rep_const) */        if (state->deckCount[player] < 0)
210: /* MUTANT (rep_const) */        if (state->deckCount[player] < -1)
210: /* MUTANT (rep_const) */        if (state->deckCount[player] < ((1)+1))
210: /* MUTANT (negate) */        if(! (state->deckCount[player] < 1))
211: /* MUTANT (rep_const) */                return 0;
211: /* MUTANT (rep_const) */                return 1;
211: /* MUTANT (rep_const) */                return ((-1)+1);
211: /* MUTANT (rep_const) */                return ((-1)-1);
212: /* MUTANT (del_stmt) */ /*         qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); */ 
215: /* MUTANT (rep_op) */        while (state->deckCount[player] <= 0) {
215: /* MUTANT (rep_op) */        while (state->deckCount[player] < 0) {
215: /* MUTANT (rep_op) */        while (state->deckCount[player] >= 0) {
215: /* MUTANT (rep_op) */        while (state->deckCount[player] == 0) {
215: /* MUTANT (rep_op) */        while (state->deckCount[player] != 0) {
215: /* MUTANT (rep_const) */        while (state->deckCount[player] > 1) {
215: /* MUTANT (rep_const) */        while (state->deckCount[player] > -1) {
215: /* MUTANT (negate) */        while(! (state->deckCount[player] > 0)) {
216: /* MUTANT (del_stmt) */ /*                 card = floor(Random() * state->deckCount[player]); */ 
217: /* MUTANT (del_stmt) */ /*                 newDeck[newDeckPos] = state->deck[player][card]; */ 
218: /* MUTANT (del_stmt) */ /*                 newDeckPos++; */ 
218: /* MUTANT (rep_op) */                newDeckPos--;
219: /* MUTANT (rep_op) */                for (i = card; i <= state->deckCount[player]-1; i++) {
219: /* MUTANT (rep_op) */                for (i = card; i > state->deckCount[player]-1; i++) {
219: /* MUTANT (rep_op) */                for (i = card; i >= state->deckCount[player]-1; i++) {
219: /* MUTANT (rep_op) */                for (i = card; i == state->deckCount[player]-1; i++) {
219: /* MUTANT (rep_op) */                for (i = card; i != state->deckCount[player]-1; i++) {
219: /* MUTANT (rep_op) */                for (i = card; i < state->deckCount[player]-1; i--) {
219: /* MUTANT (rep_const) */                for (i = card; i < state->deckCount[player]0; i++) {
219: /* MUTANT (rep_const) */                for (i = card; i < state->deckCount[player]1; i++) {
219: /* MUTANT (rep_const) */                for (i = card; i < state->deckCount[player]((-1)+1); i++) {
219: /* MUTANT (rep_const) */                for (i = card; i < state->deckCount[player]((-1)-1); i++) {
220: /* MUTANT (del_stmt) */ /*                         state->deck[player][i] = state->deck[player][i+1]; */ 
220: /* MUTANT (rep_op) */                        state->deck[player][i] = state->deck[player][i-1];
220: /* MUTANT (rep_op) */                        state->deck[player][i] = state->deck[player][i*1];
220: /* MUTANT (rep_op) */                        state->deck[player][i] = state->deck[player][i%1];
220: /* MUTANT (rep_const) */                        state->deck[player][i] = state->deck[player][i+0];
220: /* MUTANT (rep_const) */                        state->deck[player][i] = state->deck[player][i+-1];
220: /* MUTANT (rep_const) */                        state->deck[player][i] = state->deck[player][i+((1)+1)];
222: /* MUTANT (rep_op) */                state->deckCount[player]++;
224: /* MUTANT (rep_op) */        for (i = 0; i <= newDeckPos; i++) {
224: /* MUTANT (rep_op) */        for (i = 0; i > newDeckPos; i++) {
224: /* MUTANT (rep_op) */        for (i = 0; i >= newDeckPos; i++) {
224: /* MUTANT (rep_op) */        for (i = 0; i == newDeckPos; i++) {
224: /* MUTANT (rep_op) */        for (i = 0; i != newDeckPos; i++) {
224: /* MUTANT (rep_op) */        for (i = 0; i < newDeckPos; i--) {
224: /* MUTANT (rep_const) */        for (i = 1; i < newDeckPos; i++) {
224: /* MUTANT (rep_const) */        for (i = -1; i < newDeckPos; i++) {
225: /* MUTANT (del_stmt) */ /*                 state->deck[player][i] = newDeck[i]; */ 
226: /* MUTANT (del_stmt) */ /*                 state->deckCount[player]++; */ 
228: /* MUTANT (rep_const) */  return 1;
228: /* MUTANT (rep_const) */  return -1;
233: /* MUTANT (del_stmt) */ /*   int card; */ 
234: /* MUTANT (del_stmt) */ /*   int coin_bonus = 0; */  		//tracks coins gain from actions
234: /* MUTANT (rep_const) */  int coin_bonus = 1; 		//tracks coins gain from actions
234: /* MUTANT (rep_const) */  int coin_bonus = -1; 		//tracks coins gain from actions
237: /* MUTANT (rep_op) */  if (state->phase == 0)
237: /* MUTANT (rep_const) */  if (state->phase != 1)
237: /* MUTANT (rep_const) */  if (state->phase != -1)
237: /* MUTANT (negate) */  if(! (state->phase != 0))
239: /* MUTANT (del_stmt) */ /*       return -1; */ 
239: /* MUTANT (rep_const) */      return 0;
239: /* MUTANT (rep_const) */      return 1;
239: /* MUTANT (rep_const) */      return ((-1)+1);
239: /* MUTANT (rep_const) */      return ((-1)-1);
243: /* MUTANT (rep_op) */  if ( state->numActions <= 1 )
243: /* MUTANT (rep_op) */  if ( state->numActions > 1 )
243: /* MUTANT (rep_op) */  if ( state->numActions >= 1 )
243: /* MUTANT (rep_op) */  if ( state->numActions == 1 )
243: /* MUTANT (rep_op) */  if ( state->numActions != 1 )
243: /* MUTANT (rep_const) */  if ( state->numActions < 0 )
243: /* MUTANT (rep_const) */  if ( state->numActions < -1 )
243: /* MUTANT (rep_const) */  if ( state->numActions < ((1)+1) )
243: /* MUTANT (negate) */  if(! ( state->numActions < 1 ))
245: /* MUTANT (del_stmt) */ /*       return -1; */ 
245: /* MUTANT (rep_const) */      return 0;
245: /* MUTANT (rep_const) */      return 1;
245: /* MUTANT (rep_const) */      return ((-1)+1);
245: /* MUTANT (rep_const) */      return ((-1)-1);
252: /* MUTANT (rep_op) */  if ( card <= adventurer || card > treasure_map )
252: /* MUTANT (rep_op) */  if ( card > adventurer || card > treasure_map )
252: /* MUTANT (rep_op) */  if ( card >= adventurer || card > treasure_map )
252: /* MUTANT (rep_op) */  if ( card == adventurer || card > treasure_map )
252: /* MUTANT (rep_op) */  if ( card != adventurer || card > treasure_map )
252: /* MUTANT (rep_op) */  if ( card < adventurer && card > treasure_map )
252: /* MUTANT (rep_op) */  if ( card < adventurer || card <= treasure_map )
252: /* MUTANT (rep_op) */  if ( card < adventurer || card < treasure_map )
252: /* MUTANT (rep_op) */  if ( card < adventurer || card >= treasure_map )
252: /* MUTANT (rep_op) */  if ( card < adventurer || card == treasure_map )
252: /* MUTANT (rep_op) */  if ( card < adventurer || card != treasure_map )
252: /* MUTANT (negate) */  if(! ( card < adventurer || card > treasure_map ))
254: /* MUTANT (del_stmt) */ /*       return -1; */ 
254: /* MUTANT (rep_const) */      return 0;
254: /* MUTANT (rep_const) */      return 1;
254: /* MUTANT (rep_const) */      return ((-1)+1);
254: /* MUTANT (rep_const) */      return ((-1)-1);
258: /* MUTANT (rep_op) */  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) <= 0 )
258: /* MUTANT (rep_op) */  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) > 0 )
258: /* MUTANT (rep_op) */  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) >= 0 )
258: /* MUTANT (rep_op) */  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) == 0 )
258: /* MUTANT (rep_op) */  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) != 0 )
258: /* MUTANT (rep_const) */  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 1 )
258: /* MUTANT (rep_const) */  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < -1 )
258: /* MUTANT (negate) */  if(! ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ))
260: /* MUTANT (del_stmt) */ /*       return -1; */ 
260: /* MUTANT (rep_const) */      return 0;
260: /* MUTANT (rep_const) */      return 1;
260: /* MUTANT (rep_const) */      return ((-1)+1);
260: /* MUTANT (rep_const) */      return ((-1)-1);
264: /* MUTANT (rep_op) */  state->numActions++;
267: /* MUTANT (del_stmt) */ /*   updateCoins(state->whoseTurn, state, coin_bonus); */ 
269: /* MUTANT (del_stmt) */ /*   return 0; */ 
269: /* MUTANT (rep_const) */  return 1;
269: /* MUTANT (rep_const) */  return -1;
273: /* MUTANT (del_stmt) */ /*   int who; */ 
274: /* MUTANT (negate) */  if(! (DEBUG)){
275: /* MUTANT (del_stmt) */ /*     printf("Entering buyCard...\n"); */ 
282: /* MUTANT (rep_op) */  if (state->numBuys <= 1){
282: /* MUTANT (rep_op) */  if (state->numBuys > 1){
282: /* MUTANT (rep_op) */  if (state->numBuys >= 1){
282: /* MUTANT (rep_op) */  if (state->numBuys == 1){
282: /* MUTANT (rep_op) */  if (state->numBuys != 1){
282: /* MUTANT (rep_const) */  if (state->numBuys < 0){
282: /* MUTANT (rep_const) */  if (state->numBuys < -1){
282: /* MUTANT (rep_const) */  if (state->numBuys < ((1)+1)){
282: /* MUTANT (negate) */  if(! (state->numBuys < 1)){
283: /* MUTANT (negate) */    if(! (DEBUG))
285: /* MUTANT (del_stmt) */ /*     return -1; */ 
285: /* MUTANT (rep_const) */    return 0;
285: /* MUTANT (rep_const) */    return 1;
285: /* MUTANT (rep_const) */    return ((-1)+1);
285: /* MUTANT (rep_const) */    return ((-1)-1);
286: /* MUTANT (rep_op) */  } else if (supplyCount(supplyPos, state) <=1){
286: /* MUTANT (rep_op) */  } else if (supplyCount(supplyPos, state) >1){
286: /* MUTANT (rep_op) */  } else if (supplyCount(supplyPos, state) >=1){
286: /* MUTANT (rep_op) */  } else if (supplyCount(supplyPos, state) ==1){
286: /* MUTANT (rep_op) */  } else if (supplyCount(supplyPos, state) !=1){
286: /* MUTANT (rep_const) */  } else if (supplyCount(supplyPos, state) <0){
286: /* MUTANT (rep_const) */  } else if (supplyCount(supplyPos, state) <-1){
286: /* MUTANT (rep_const) */  } else if (supplyCount(supplyPos, state) <((1)+1)){
286: /* MUTANT (negate) */  } else if(! (supplyCount(supplyPos, state) <1)){
287: /* MUTANT (negate) */    if(! (DEBUG))
289: /* MUTANT (del_stmt) */ /*     return -1; */ 
289: /* MUTANT (rep_const) */    return 0;
289: /* MUTANT (rep_const) */    return 1;
289: /* MUTANT (rep_const) */    return ((-1)+1);
289: /* MUTANT (rep_const) */    return ((-1)-1);
290: /* MUTANT (rep_op) */  } else if (state->coins <= getCost(supplyPos)){
290: /* MUTANT (rep_op) */  } else if (state->coins > getCost(supplyPos)){
290: /* MUTANT (rep_op) */  } else if (state->coins >= getCost(supplyPos)){
290: /* MUTANT (rep_op) */  } else if (state->coins == getCost(supplyPos)){
290: /* MUTANT (rep_op) */  } else if (state->coins != getCost(supplyPos)){
290: /* MUTANT (negate) */  } else if(! (state->coins < getCost(supplyPos))){
291: /* MUTANT (negate) */    if(! (DEBUG)) 
293: /* MUTANT (del_stmt) */ /*     return -1; */ 
293: /* MUTANT (rep_const) */    return 0;
293: /* MUTANT (rep_const) */    return 1;
293: /* MUTANT (rep_const) */    return ((-1)+1);
293: /* MUTANT (rep_const) */    return ((-1)-1);
295: /* MUTANT (del_stmt) */ /*     state->phase=1; */ 
295: /* MUTANT (rep_const) */    state->phase=0;
295: /* MUTANT (rep_const) */    state->phase=-1;
295: /* MUTANT (rep_const) */    state->phase=((1)+1);
297: /* MUTANT (del_stmt) */ /*     gainCard(supplyPos, state, 0, who); */  //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
297: /* MUTANT (rep_const) */    gainCard(supplyPos, state, 1, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
297: /* MUTANT (rep_const) */    gainCard(supplyPos, state, -1, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
299: /* MUTANT (del_stmt) */ /*     state->coins = (state->coins) - (getCost(supplyPos)); */ 
300: /* MUTANT (del_stmt) */ /*     state->numBuys--; */ 
300: /* MUTANT (rep_op) */    state->numBuys++;
301: /* MUTANT (negate) */    if(! (DEBUG))
308: /* MUTANT (rep_const) */  return 1;
308: /* MUTANT (rep_const) */  return -1;
312: /* MUTANT (del_stmt) */ /*   return state->handCount[ whoseTurn(state) ]; */ 
316: /* MUTANT (del_stmt) */ /*   int currentPlayer = whoseTurn(state); */ 
317: /* MUTANT (del_stmt) */ /*   return state->hand[currentPlayer][handPos]; */ 
321: /* MUTANT (del_stmt) */ /*   return state->supplyCount[card]; */ 
325: /* MUTANT (del_stmt) */ /*   int i; */ 
326: /* MUTANT (del_stmt) */ /*   int count = 0; */ 
326: /* MUTANT (rep_const) */  int count = 1;
326: /* MUTANT (rep_const) */  int count = -1;
328: /* MUTANT (rep_op) */  for (i = 0; i <= state->deckCount[player]; i++)
328: /* MUTANT (rep_op) */  for (i = 0; i > state->deckCount[player]; i++)
328: /* MUTANT (rep_op) */  for (i = 0; i >= state->deckCount[player]; i++)
328: /* MUTANT (rep_op) */  for (i = 0; i == state->deckCount[player]; i++)
328: /* MUTANT (rep_op) */  for (i = 0; i != state->deckCount[player]; i++)
328: /* MUTANT (rep_op) */  for (i = 0; i < state->deckCount[player]; i--)
328: /* MUTANT (rep_const) */  for (i = 1; i < state->deckCount[player]; i++)
328: /* MUTANT (rep_const) */  for (i = -1; i < state->deckCount[player]; i++)
330: /* MUTANT (del_stmt) */ /*       if (state->deck[player][i] == card) count++; */ 
330: /* MUTANT (rep_op) */      if (state->deck[player][i] != card) count++;
330: /* MUTANT (rep_op) */      if (state->deck[player][i] == card) count--;
330: /* MUTANT (negate) */      if(! (state->deck[player][i] == card)) count++;
333: /* MUTANT (rep_op) */  for (i = 0; i <= state->handCount[player]; i++)
333: /* MUTANT (rep_op) */  for (i = 0; i > state->handCount[player]; i++)
333: /* MUTANT (rep_op) */  for (i = 0; i >= state->handCount[player]; i++)
333: /* MUTANT (rep_op) */  for (i = 0; i == state->handCount[player]; i++)
333: /* MUTANT (rep_op) */  for (i = 0; i != state->handCount[player]; i++)
333: /* MUTANT (rep_op) */  for (i = 0; i < state->handCount[player]; i--)
333: /* MUTANT (rep_const) */  for (i = 1; i < state->handCount[player]; i++)
333: /* MUTANT (rep_const) */  for (i = -1; i < state->handCount[player]; i++)
335: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == card) count++; */ 
335: /* MUTANT (rep_op) */      if (state->hand[player][i] != card) count++;
335: /* MUTANT (rep_op) */      if (state->hand[player][i] == card) count--;
335: /* MUTANT (negate) */      if(! (state->hand[player][i] == card)) count++;
338: /* MUTANT (rep_op) */  for (i = 0; i <= state->discardCount[player]; i++)
338: /* MUTANT (rep_op) */  for (i = 0; i > state->discardCount[player]; i++)
338: /* MUTANT (rep_op) */  for (i = 0; i >= state->discardCount[player]; i++)
338: /* MUTANT (rep_op) */  for (i = 0; i == state->discardCount[player]; i++)
338: /* MUTANT (rep_op) */  for (i = 0; i != state->discardCount[player]; i++)
338: /* MUTANT (rep_op) */  for (i = 0; i < state->discardCount[player]; i--)
338: /* MUTANT (rep_const) */  for (i = 1; i < state->discardCount[player]; i++)
338: /* MUTANT (rep_const) */  for (i = -1; i < state->discardCount[player]; i++)
340: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == card) count++; */ 
340: /* MUTANT (rep_op) */      if (state->discard[player][i] != card) count++;
340: /* MUTANT (rep_op) */      if (state->discard[player][i] == card) count--;
340: /* MUTANT (negate) */      if(! (state->discard[player][i] == card)) count++;
347: /* MUTANT (del_stmt) */ /*   return state->whoseTurn; */ 
351: /* MUTANT (del_stmt) */ /*   int k; */ 
352: /* MUTANT (del_stmt) */ /*   int i; */ 
353: /* MUTANT (del_stmt) */ /*   int currentPlayer = whoseTurn(state); */ 
356: /* MUTANT (rep_op) */  for (i = 0; i <= state->handCount[currentPlayer]; i++){
356: /* MUTANT (rep_op) */  for (i = 0; i > state->handCount[currentPlayer]; i++){
356: /* MUTANT (rep_op) */  for (i = 0; i >= state->handCount[currentPlayer]; i++){
356: /* MUTANT (rep_op) */  for (i = 0; i == state->handCount[currentPlayer]; i++){
356: /* MUTANT (rep_op) */  for (i = 0; i != state->handCount[currentPlayer]; i++){
356: /* MUTANT (rep_op) */  for (i = 0; i < state->handCount[currentPlayer]; i--){
356: /* MUTANT (rep_const) */  for (i = 1; i < state->handCount[currentPlayer]; i++){
356: /* MUTANT (rep_const) */  for (i = -1; i < state->handCount[currentPlayer]; i++){
357: /* MUTANT (del_stmt) */ /*     state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; */ //Discard
357: /* MUTANT (rep_op) */    state->discard[currentPlayer][state->discardCount[currentPlayer]--] = state->hand[currentPlayer][i];//Discard
358: /* MUTANT (del_stmt) */ /*     state->hand[currentPlayer][i] = -1; */ //Set card to -1
358: /* MUTANT (rep_const) */    state->hand[currentPlayer][i] = 0;//Set card to -1
358: /* MUTANT (rep_const) */    state->hand[currentPlayer][i] = 1;//Set card to -1
358: /* MUTANT (rep_const) */    state->hand[currentPlayer][i] = ((-1)+1);//Set card to -1
358: /* MUTANT (rep_const) */    state->hand[currentPlayer][i] = ((-1)-1);//Set card to -1
360: /* MUTANT (rep_const) */  state->handCount[currentPlayer] = 1;//Reset hand count
360: /* MUTANT (rep_const) */  state->handCount[currentPlayer] = -1;//Reset hand count
363: /* MUTANT (rep_op) */  if (currentPlayer <= (state->numPlayers - 1)){ 
363: /* MUTANT (rep_op) */  if (currentPlayer > (state->numPlayers - 1)){ 
363: /* MUTANT (rep_op) */  if (currentPlayer >= (state->numPlayers - 1)){ 
363: /* MUTANT (rep_op) */  if (currentPlayer == (state->numPlayers - 1)){ 
363: /* MUTANT (rep_op) */  if (currentPlayer != (state->numPlayers - 1)){ 
363: /* MUTANT (rep_const) */  if (currentPlayer < (state->numPlayers - 0)){ 
363: /* MUTANT (rep_const) */  if (currentPlayer < (state->numPlayers - -1)){ 
363: /* MUTANT (rep_const) */  if (currentPlayer < (state->numPlayers - ((1)+1))){ 
363: /* MUTANT (negate) */  if(! (currentPlayer < (state->numPlayers - 1))){ 
364: /* MUTANT (del_stmt) */ /*     state->whoseTurn = currentPlayer + 1; */ //Still safe to increment
364: /* MUTANT (rep_op) */    state->whoseTurn = currentPlayer - 1;//Still safe to increment
364: /* MUTANT (rep_op) */    state->whoseTurn = currentPlayer * 1;//Still safe to increment
364: /* MUTANT (rep_op) */    state->whoseTurn = currentPlayer % 1;//Still safe to increment
364: /* MUTANT (rep_const) */    state->whoseTurn = currentPlayer + 0;//Still safe to increment
364: /* MUTANT (rep_const) */    state->whoseTurn = currentPlayer + -1;//Still safe to increment
364: /* MUTANT (rep_const) */    state->whoseTurn = currentPlayer + ((1)+1);//Still safe to increment
367: /* MUTANT (del_stmt) */ /*     state->whoseTurn = 0; */ //Max player has been reached, loop back around to player 1
367: /* MUTANT (rep_const) */    state->whoseTurn = 1;//Max player has been reached, loop back around to player 1
367: /* MUTANT (rep_const) */    state->whoseTurn = -1;//Max player has been reached, loop back around to player 1
370: /* MUTANT (rep_const) */  state->outpostPlayed = 1;
370: /* MUTANT (rep_const) */  state->outpostPlayed = -1;
371: /* MUTANT (del_stmt) */ /*   state->phase = 0; */ 
371: /* MUTANT (rep_const) */  state->phase = 1;
371: /* MUTANT (rep_const) */  state->phase = -1;
372: /* MUTANT (del_stmt) */ /*   state->numActions = 1; */ 
372: /* MUTANT (rep_const) */  state->numActions = 0;
372: /* MUTANT (rep_const) */  state->numActions = -1;
372: /* MUTANT (rep_const) */  state->numActions = ((1)+1);
373: /* MUTANT (del_stmt) */ /*   state->coins = 0; */ 
373: /* MUTANT (rep_const) */  state->coins = 1;
373: /* MUTANT (rep_const) */  state->coins = -1;
374: /* MUTANT (del_stmt) */ /*   state->numBuys = 1; */ 
374: /* MUTANT (rep_const) */  state->numBuys = 0;
374: /* MUTANT (rep_const) */  state->numBuys = -1;
374: /* MUTANT (rep_const) */  state->numBuys = ((1)+1);
375: /* MUTANT (del_stmt) */ /*   state->playedCardCount = 0; */ 
375: /* MUTANT (rep_const) */  state->playedCardCount = 1;
375: /* MUTANT (rep_const) */  state->playedCardCount = -1;
376: /* MUTANT (del_stmt) */ /*   state->handCount[state->whoseTurn] = 0; */ 
376: /* MUTANT (rep_const) */  state->handCount[state->whoseTurn] = 1;
376: /* MUTANT (rep_const) */  state->handCount[state->whoseTurn] = -1;
380: /* MUTANT (rep_op) */  for (k = 0; k <= 5; k++){
380: /* MUTANT (rep_op) */  for (k = 0; k > 5; k++){
380: /* MUTANT (rep_op) */  for (k = 0; k >= 5; k++){
380: /* MUTANT (rep_op) */  for (k = 0; k == 5; k++){
380: /* MUTANT (rep_op) */  for (k = 0; k != 5; k++){
380: /* MUTANT (rep_op) */  for (k = 0; k < 5; k--){
380: /* MUTANT (rep_const) */  for (k = 1; k < 5; k++){
380: /* MUTANT (rep_const) */  for (k = -1; k < 5; k++){
380: /* MUTANT (rep_const) */  for (k = 0; k < 0; k++){
380: /* MUTANT (rep_const) */  for (k = 0; k < 1; k++){
380: /* MUTANT (rep_const) */  for (k = 0; k < -1; k++){
380: /* MUTANT (rep_const) */  for (k = 0; k < ((5)+1); k++){
380: /* MUTANT (rep_const) */  for (k = 0; k < ((5)-1); k++){
381: /* MUTANT (del_stmt) */ /*     drawCard(state->whoseTurn, state); */ //Draw a card
385: /* MUTANT (rep_const) */  updateCoins(state->whoseTurn, state , 1);
385: /* MUTANT (rep_const) */  updateCoins(state->whoseTurn, state , -1);
387: /* MUTANT (del_stmt) */ /*   return 0; */ 
387: /* MUTANT (rep_const) */  return 1;
387: /* MUTANT (rep_const) */  return -1;
391: /* MUTANT (del_stmt) */ /*   int i; */ 
392: /* MUTANT (del_stmt) */ /*   int j; */ 
395: /* MUTANT (rep_op) */  if (state->supplyCount[province] != 0)
395: /* MUTANT (rep_const) */  if (state->supplyCount[province] == 1)
395: /* MUTANT (rep_const) */  if (state->supplyCount[province] == -1)
395: /* MUTANT (negate) */  if(! (state->supplyCount[province] == 0))
397: /* MUTANT (del_stmt) */ /*       return 1; */ 
397: /* MUTANT (rep_const) */      return 0;
397: /* MUTANT (rep_const) */      return -1;
397: /* MUTANT (rep_const) */      return ((1)+1);
401: /* MUTANT (rep_const) */  j = 1;
401: /* MUTANT (rep_const) */  j = -1;
402: /* MUTANT (rep_op) */  for (i = 0; i <= 25; i++)
402: /* MUTANT (rep_op) */  for (i = 0; i > 25; i++)
402: /* MUTANT (rep_op) */  for (i = 0; i >= 25; i++)
402: /* MUTANT (rep_op) */  for (i = 0; i == 25; i++)
402: /* MUTANT (rep_op) */  for (i = 0; i != 25; i++)
402: /* MUTANT (rep_op) */  for (i = 0; i < 25; i--)
402: /* MUTANT (rep_const) */  for (i = 1; i < 25; i++)
402: /* MUTANT (rep_const) */  for (i = -1; i < 25; i++)
402: /* MUTANT (rep_const) */  for (i = 0; i < 0; i++)
402: /* MUTANT (rep_const) */  for (i = 0; i < 1; i++)
402: /* MUTANT (rep_const) */  for (i = 0; i < -1; i++)
402: /* MUTANT (rep_const) */  for (i = 0; i < ((25)+1); i++)
402: /* MUTANT (rep_const) */  for (i = 0; i < ((25)-1); i++)
404: /* MUTANT (rep_op) */      if (state->supplyCount[i] != 0)
404: /* MUTANT (rep_const) */      if (state->supplyCount[i] == 1)
404: /* MUTANT (rep_const) */      if (state->supplyCount[i] == -1)
404: /* MUTANT (negate) */      if(! (state->supplyCount[i] == 0))
406: /* MUTANT (del_stmt) */ /* 	  j++; */ 
406: /* MUTANT (rep_op) */	  j--;
409: /* MUTANT (rep_op) */  if ( j <= 3)
409: /* MUTANT (rep_op) */  if ( j < 3)
409: /* MUTANT (rep_op) */  if ( j > 3)
409: /* MUTANT (rep_op) */  if ( j == 3)
409: /* MUTANT (rep_op) */  if ( j != 3)
409: /* MUTANT (rep_const) */  if ( j >= 0)
409: /* MUTANT (rep_const) */  if ( j >= 1)
409: /* MUTANT (rep_const) */  if ( j >= -1)
409: /* MUTANT (rep_const) */  if ( j >= ((3)+1))
409: /* MUTANT (rep_const) */  if ( j >= ((3)-1))
409: /* MUTANT (negate) */  if(! ( j >= 3))
411: /* MUTANT (del_stmt) */ /*       return 1; */ 
411: /* MUTANT (rep_const) */      return 0;
411: /* MUTANT (rep_const) */      return -1;
411: /* MUTANT (rep_const) */      return ((1)+1);
414: /* MUTANT (rep_const) */  return 1;
414: /* MUTANT (rep_const) */  return -1;
419: /* MUTANT (del_stmt) */ /*   int i; */ 
420: /* MUTANT (del_stmt) */ /*   int score = 0; */ 
420: /* MUTANT (rep_const) */  int score = 1;
420: /* MUTANT (rep_const) */  int score = -1;
422: /* MUTANT (rep_op) */  for (i = 0; i <= state->handCount[player]; i++)
422: /* MUTANT (rep_op) */  for (i = 0; i > state->handCount[player]; i++)
422: /* MUTANT (rep_op) */  for (i = 0; i >= state->handCount[player]; i++)
422: /* MUTANT (rep_op) */  for (i = 0; i == state->handCount[player]; i++)
422: /* MUTANT (rep_op) */  for (i = 0; i != state->handCount[player]; i++)
422: /* MUTANT (rep_op) */  for (i = 0; i < state->handCount[player]; i--)
422: /* MUTANT (rep_const) */  for (i = 1; i < state->handCount[player]; i++)
422: /* MUTANT (rep_const) */  for (i = -1; i < state->handCount[player]; i++)
424: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == curse) { score = score - 1; */  };
424: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == curse) { score = score - 1; */  /*  }; */ 
424: /* MUTANT (del_stmt) */      if (state->hand[player][i] == curse) { score = score - 1; /*  }; */ 
424: /* MUTANT (rep_op) */      if (state->hand[player][i] != curse) { score = score - 1; };
424: /* MUTANT (rep_const) */      if (state->hand[player][i] == curse) { score = score - 0; };
424: /* MUTANT (rep_const) */      if (state->hand[player][i] == curse) { score = score - -1; };
424: /* MUTANT (rep_const) */      if (state->hand[player][i] == curse) { score = score - ((1)+1); };
424: /* MUTANT (negate) */      if(! (state->hand[player][i] == curse)) { score = score - 1; };
425: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == estate) { score = score + 1; */  };
425: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == estate) { score = score + 1; */  /*  }; */ 
425: /* MUTANT (del_stmt) */      if (state->hand[player][i] == estate) { score = score + 1; /*  }; */ 
425: /* MUTANT (rep_op) */      if (state->hand[player][i] != estate) { score = score + 1; };
425: /* MUTANT (rep_op) */      if (state->hand[player][i] == estate) { score = score - 1; };
425: /* MUTANT (rep_op) */      if (state->hand[player][i] == estate) { score = score * 1; };
425: /* MUTANT (rep_op) */      if (state->hand[player][i] == estate) { score = score % 1; };
425: /* MUTANT (rep_const) */      if (state->hand[player][i] == estate) { score = score + 0; };
425: /* MUTANT (rep_const) */      if (state->hand[player][i] == estate) { score = score + -1; };
425: /* MUTANT (rep_const) */      if (state->hand[player][i] == estate) { score = score + ((1)+1); };
425: /* MUTANT (negate) */      if(! (state->hand[player][i] == estate)) { score = score + 1; };
426: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == duchy) { score = score + 3; */  };
426: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == duchy) { score = score + 3; */  /*  }; */ 
426: /* MUTANT (del_stmt) */      if (state->hand[player][i] == duchy) { score = score + 3; /*  }; */ 
426: /* MUTANT (rep_op) */      if (state->hand[player][i] != duchy) { score = score + 3; };
426: /* MUTANT (rep_op) */      if (state->hand[player][i] == duchy) { score = score - 3; };
426: /* MUTANT (rep_op) */      if (state->hand[player][i] == duchy) { score = score * 3; };
426: /* MUTANT (rep_op) */      if (state->hand[player][i] == duchy) { score = score % 3; };
426: /* MUTANT (rep_const) */      if (state->hand[player][i] == duchy) { score = score + 0; };
426: /* MUTANT (rep_const) */      if (state->hand[player][i] == duchy) { score = score + 1; };
426: /* MUTANT (rep_const) */      if (state->hand[player][i] == duchy) { score = score + -1; };
426: /* MUTANT (rep_const) */      if (state->hand[player][i] == duchy) { score = score + ((3)+1); };
426: /* MUTANT (rep_const) */      if (state->hand[player][i] == duchy) { score = score + ((3)-1); };
426: /* MUTANT (negate) */      if(! (state->hand[player][i] == duchy)) { score = score + 3; };
427: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == province) { score = score + 6; */  };
427: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == province) { score = score + 6; */  /*  }; */ 
427: /* MUTANT (del_stmt) */      if (state->hand[player][i] == province) { score = score + 6; /*  }; */ 
427: /* MUTANT (rep_op) */      if (state->hand[player][i] != province) { score = score + 6; };
427: /* MUTANT (rep_op) */      if (state->hand[player][i] == province) { score = score - 6; };
427: /* MUTANT (rep_op) */      if (state->hand[player][i] == province) { score = score * 6; };
427: /* MUTANT (rep_op) */      if (state->hand[player][i] == province) { score = score % 6; };
427: /* MUTANT (rep_const) */      if (state->hand[player][i] == province) { score = score + 0; };
427: /* MUTANT (rep_const) */      if (state->hand[player][i] == province) { score = score + 1; };
427: /* MUTANT (rep_const) */      if (state->hand[player][i] == province) { score = score + -1; };
427: /* MUTANT (rep_const) */      if (state->hand[player][i] == province) { score = score + ((6)+1); };
427: /* MUTANT (rep_const) */      if (state->hand[player][i] == province) { score = score + ((6)-1); };
427: /* MUTANT (negate) */      if(! (state->hand[player][i] == province)) { score = score + 6; };
428: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == great_hall) { score = score + 1; */  };
428: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
428: /* MUTANT (del_stmt) */      if (state->hand[player][i] == great_hall) { score = score + 1; /*  }; */ 
428: /* MUTANT (rep_op) */      if (state->hand[player][i] != great_hall) { score = score + 1; };
428: /* MUTANT (rep_op) */      if (state->hand[player][i] == great_hall) { score = score - 1; };
428: /* MUTANT (rep_op) */      if (state->hand[player][i] == great_hall) { score = score * 1; };
428: /* MUTANT (rep_op) */      if (state->hand[player][i] == great_hall) { score = score % 1; };
428: /* MUTANT (rep_const) */      if (state->hand[player][i] == great_hall) { score = score + 0; };
428: /* MUTANT (rep_const) */      if (state->hand[player][i] == great_hall) { score = score + -1; };
428: /* MUTANT (rep_const) */      if (state->hand[player][i] == great_hall) { score = score + ((1)+1); };
428: /* MUTANT (negate) */      if(! (state->hand[player][i] == great_hall)) { score = score + 1; };
429: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  };
429: /* MUTANT (del_stmt) */ /*       if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  /*  }; */ 
429: /* MUTANT (del_stmt) */      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); /*  }; */ 
429: /* MUTANT (rep_op) */      if (state->hand[player][i] != gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
429: /* MUTANT (rep_op) */      if (state->hand[player][i] == gardens) { score = score - ( fullDeckCount(player, 0, state) / 10 ); };
429: /* MUTANT (rep_op) */      if (state->hand[player][i] == gardens) { score = score * ( fullDeckCount(player, 0, state) / 10 ); };
429: /* MUTANT (rep_op) */      if (state->hand[player][i] == gardens) { score = score % ( fullDeckCount(player, 0, state) / 10 ); };
429: /* MUTANT (rep_const) */      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 1, state) / 10 ); };
429: /* MUTANT (rep_const) */      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, -1, state) / 10 ); };
429: /* MUTANT (rep_const) */      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 0 ); };
429: /* MUTANT (rep_const) */      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 1 ); };
429: /* MUTANT (rep_const) */      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / -1 ); };
429: /* MUTANT (rep_const) */      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)+1) ); };
429: /* MUTANT (rep_const) */      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)-1) ); };
429: /* MUTANT (negate) */      if(! (state->hand[player][i] == gardens)) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
433: /* MUTANT (rep_op) */  for (i = 0; i <= state->discardCount[player]; i++)
433: /* MUTANT (rep_op) */  for (i = 0; i > state->discardCount[player]; i++)
433: /* MUTANT (rep_op) */  for (i = 0; i >= state->discardCount[player]; i++)
433: /* MUTANT (rep_op) */  for (i = 0; i == state->discardCount[player]; i++)
433: /* MUTANT (rep_op) */  for (i = 0; i != state->discardCount[player]; i++)
433: /* MUTANT (rep_op) */  for (i = 0; i < state->discardCount[player]; i--)
433: /* MUTANT (rep_const) */  for (i = 1; i < state->discardCount[player]; i++)
433: /* MUTANT (rep_const) */  for (i = -1; i < state->discardCount[player]; i++)
435: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == curse) { score = score - 1; */  };
435: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == curse) { score = score - 1; */  /*  }; */ 
435: /* MUTANT (del_stmt) */      if (state->discard[player][i] == curse) { score = score - 1; /*  }; */ 
435: /* MUTANT (rep_op) */      if (state->discard[player][i] != curse) { score = score - 1; };
435: /* MUTANT (rep_const) */      if (state->discard[player][i] == curse) { score = score - 0; };
435: /* MUTANT (rep_const) */      if (state->discard[player][i] == curse) { score = score - -1; };
435: /* MUTANT (rep_const) */      if (state->discard[player][i] == curse) { score = score - ((1)+1); };
435: /* MUTANT (negate) */      if(! (state->discard[player][i] == curse)) { score = score - 1; };
436: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == estate) { score = score + 1; */  };
436: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == estate) { score = score + 1; */  /*  }; */ 
436: /* MUTANT (del_stmt) */      if (state->discard[player][i] == estate) { score = score + 1; /*  }; */ 
436: /* MUTANT (rep_op) */      if (state->discard[player][i] != estate) { score = score + 1; };
436: /* MUTANT (rep_op) */      if (state->discard[player][i] == estate) { score = score - 1; };
436: /* MUTANT (rep_op) */      if (state->discard[player][i] == estate) { score = score * 1; };
436: /* MUTANT (rep_op) */      if (state->discard[player][i] == estate) { score = score % 1; };
436: /* MUTANT (rep_const) */      if (state->discard[player][i] == estate) { score = score + 0; };
436: /* MUTANT (rep_const) */      if (state->discard[player][i] == estate) { score = score + -1; };
436: /* MUTANT (rep_const) */      if (state->discard[player][i] == estate) { score = score + ((1)+1); };
436: /* MUTANT (negate) */      if(! (state->discard[player][i] == estate)) { score = score + 1; };
437: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == duchy) { score = score + 3; */  };
437: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == duchy) { score = score + 3; */  /*  }; */ 
437: /* MUTANT (del_stmt) */      if (state->discard[player][i] == duchy) { score = score + 3; /*  }; */ 
437: /* MUTANT (rep_op) */      if (state->discard[player][i] != duchy) { score = score + 3; };
437: /* MUTANT (rep_op) */      if (state->discard[player][i] == duchy) { score = score - 3; };
437: /* MUTANT (rep_op) */      if (state->discard[player][i] == duchy) { score = score * 3; };
437: /* MUTANT (rep_op) */      if (state->discard[player][i] == duchy) { score = score % 3; };
437: /* MUTANT (rep_const) */      if (state->discard[player][i] == duchy) { score = score + 0; };
437: /* MUTANT (rep_const) */      if (state->discard[player][i] == duchy) { score = score + 1; };
437: /* MUTANT (rep_const) */      if (state->discard[player][i] == duchy) { score = score + -1; };
437: /* MUTANT (rep_const) */      if (state->discard[player][i] == duchy) { score = score + ((3)+1); };
437: /* MUTANT (rep_const) */      if (state->discard[player][i] == duchy) { score = score + ((3)-1); };
437: /* MUTANT (negate) */      if(! (state->discard[player][i] == duchy)) { score = score + 3; };
438: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == province) { score = score + 6; */  };
438: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == province) { score = score + 6; */  /*  }; */ 
438: /* MUTANT (del_stmt) */      if (state->discard[player][i] == province) { score = score + 6; /*  }; */ 
438: /* MUTANT (rep_op) */      if (state->discard[player][i] != province) { score = score + 6; };
438: /* MUTANT (rep_op) */      if (state->discard[player][i] == province) { score = score - 6; };
438: /* MUTANT (rep_op) */      if (state->discard[player][i] == province) { score = score * 6; };
438: /* MUTANT (rep_op) */      if (state->discard[player][i] == province) { score = score % 6; };
438: /* MUTANT (rep_const) */      if (state->discard[player][i] == province) { score = score + 0; };
438: /* MUTANT (rep_const) */      if (state->discard[player][i] == province) { score = score + 1; };
438: /* MUTANT (rep_const) */      if (state->discard[player][i] == province) { score = score + -1; };
438: /* MUTANT (rep_const) */      if (state->discard[player][i] == province) { score = score + ((6)+1); };
438: /* MUTANT (rep_const) */      if (state->discard[player][i] == province) { score = score + ((6)-1); };
438: /* MUTANT (negate) */      if(! (state->discard[player][i] == province)) { score = score + 6; };
439: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == great_hall) { score = score + 1; */  };
439: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
439: /* MUTANT (del_stmt) */      if (state->discard[player][i] == great_hall) { score = score + 1; /*  }; */ 
439: /* MUTANT (rep_op) */      if (state->discard[player][i] != great_hall) { score = score + 1; };
439: /* MUTANT (rep_op) */      if (state->discard[player][i] == great_hall) { score = score - 1; };
439: /* MUTANT (rep_op) */      if (state->discard[player][i] == great_hall) { score = score * 1; };
439: /* MUTANT (rep_op) */      if (state->discard[player][i] == great_hall) { score = score % 1; };
439: /* MUTANT (rep_const) */      if (state->discard[player][i] == great_hall) { score = score + 0; };
439: /* MUTANT (rep_const) */      if (state->discard[player][i] == great_hall) { score = score + -1; };
439: /* MUTANT (rep_const) */      if (state->discard[player][i] == great_hall) { score = score + ((1)+1); };
439: /* MUTANT (negate) */      if(! (state->discard[player][i] == great_hall)) { score = score + 1; };
440: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  };
440: /* MUTANT (del_stmt) */ /*       if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  /*  }; */ 
440: /* MUTANT (del_stmt) */      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); /*  }; */ 
440: /* MUTANT (rep_op) */      if (state->discard[player][i] != gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
440: /* MUTANT (rep_op) */      if (state->discard[player][i] == gardens) { score = score - ( fullDeckCount(player, 0, state) / 10 ); };
440: /* MUTANT (rep_op) */      if (state->discard[player][i] == gardens) { score = score * ( fullDeckCount(player, 0, state) / 10 ); };
440: /* MUTANT (rep_op) */      if (state->discard[player][i] == gardens) { score = score % ( fullDeckCount(player, 0, state) / 10 ); };
440: /* MUTANT (rep_const) */      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 1, state) / 10 ); };
440: /* MUTANT (rep_const) */      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, -1, state) / 10 ); };
440: /* MUTANT (rep_const) */      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 0 ); };
440: /* MUTANT (rep_const) */      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 1 ); };
440: /* MUTANT (rep_const) */      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / -1 ); };
440: /* MUTANT (rep_const) */      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)+1) ); };
440: /* MUTANT (rep_const) */      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)-1) ); };
440: /* MUTANT (negate) */      if(! (state->discard[player][i] == gardens)) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
444: /* MUTANT (rep_op) */  for (i = 0; i <= state->discardCount[player]; i++)
444: /* MUTANT (rep_op) */  for (i = 0; i > state->discardCount[player]; i++)
444: /* MUTANT (rep_op) */  for (i = 0; i >= state->discardCount[player]; i++)
444: /* MUTANT (rep_op) */  for (i = 0; i == state->discardCount[player]; i++)
444: /* MUTANT (rep_op) */  for (i = 0; i != state->discardCount[player]; i++)
444: /* MUTANT (rep_op) */  for (i = 0; i < state->discardCount[player]; i--)
444: /* MUTANT (rep_const) */  for (i = 1; i < state->discardCount[player]; i++)
444: /* MUTANT (rep_const) */  for (i = -1; i < state->discardCount[player]; i++)
446: /* MUTANT (del_stmt) */ /*       if (state->deck[player][i] == curse) { score = score - 1; */  };
446: /* MUTANT (del_stmt) */ /*       if (state->deck[player][i] == curse) { score = score - 1; */  /*  }; */ 
446: /* MUTANT (del_stmt) */      if (state->deck[player][i] == curse) { score = score - 1; /*  }; */ 
446: /* MUTANT (rep_op) */      if (state->deck[player][i] != curse) { score = score - 1; };
446: /* MUTANT (rep_const) */      if (state->deck[player][i] == curse) { score = score - 0; };
446: /* MUTANT (rep_const) */      if (state->deck[player][i] == curse) { score = score - -1; };
446: /* MUTANT (rep_const) */      if (state->deck[player][i] == curse) { score = score - ((1)+1); };
446: /* MUTANT (negate) */      if(! (state->deck[player][i] == curse)) { score = score - 1; };
447: /* MUTANT (del_stmt) */ /*       if (state->deck[player][i] == estate) { score = score + 1; */  };
447: /* MUTANT (del_stmt) */ /*       if (state->deck[player][i] == estate) { score = score + 1; */  /*  }; */ 
447: /* MUTANT (del_stmt) */      if (state->deck[player][i] == estate) { score = score + 1; /*  }; */ 
447: /* MUTANT (rep_op) */      if (state->deck[player][i] != estate) { score = score + 1; };
447: /* MUTANT (rep_op) */      if (state->deck[player][i] == estate) { score = score - 1; };
447: /* MUTANT (rep_op) */      if (state->deck[player][i] == estate) { score = score * 1; };
447: /* MUTANT (rep_op) */      if (state->deck[player][i] == estate) { score = score % 1; };
447: /* MUTANT (rep_const) */      if (state->deck[player][i] == estate) { score = score + 0; };
447: /* MUTANT (rep_const) */      if (state->deck[player][i] == estate) { score = score + -1; };
447: /* MUTANT (rep_const) */      if (state->deck[player][i] == estate) { score = score + ((1)+1); };
447: /* MUTANT (negate) */      if(! (state->deck[player][i] == estate)) { score = score + 1; };
448: /* MUTANT (del_stmt) */ /*       if (state->deck[player][i] == duchy) { score = score + 3; */  };
448: /* MUTANT (del_stmt) */ /*       if (state->deck[player][i] == duchy) { score = score + 3; */  /*  }; */ 
448: /* MUTANT (del_stmt) */      if (state->deck[player][i] == duchy) { score = score + 3; /*  }; */ 
448: /* MUTANT (rep_op) */      if (state->deck[player][i] != duchy) { score = score + 3; };
448: /* MUTANT (rep_op) */      if (state->deck[player][i] == duchy) { score = score - 3; };
448: /* MUTANT (rep_op) */      if (state->deck[player][i] == duchy) { score = score * 3; };
448: /* MUTANT (rep_op) */      if (state->deck[player][i] == duchy) { score = score % 3; };
448: /* MUTANT (rep_const) */      if (state->deck[player][i] == duchy) { score = score + 0; };
448: /* MUTANT (rep_const) */      if (state->deck[player][i] == duchy) { score = score + 1; };
448: /* MUTANT (rep_const) */      if (state->deck[player][i] == duchy) { score = score + -1; };
