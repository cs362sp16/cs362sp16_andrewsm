        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "anassert.h"
        -:    4:
        1:    5:int main()
        -:    6:{
        1:    7:	struct gameState* state = calloc(1, sizeof(struct gameState));
        1:    8:	int test = 0;
        -:    9:	int i;
        1:   10:	int score = 0;
        -:   11:	//score from hand
        1:   12:	for (i = 0; i < state->handCount[0]; i++)
        -:   13:	{
    #####:   14:		if (state->hand[0][i] == curse) { score = score - 1; };
    #####:   15:		if (state->hand[0][i] == estate) { score = score + 1; };
    #####:   16:		if (state->hand[0][i] == duchy) { score = score + 3; };
    #####:   17:		if (state->hand[0][i] == province) { score = score + 6; };
    #####:   18:		if (state->hand[0][i] == great_hall) { score = score + 1; };
    #####:   19:		if (state->hand[0][i] == gardens) { score = score + ( fullDeckCount(0, 0, state) / 10 ); };
        -:   20:	}
        -:   21:
        -:   22:	//score from discard
        1:   23:	for (i = 0; i < state->discardCount[0]; i++)
        -:   24:	{
    #####:   25:		if (state->discard[0][i] == curse) { score = score - 1; };
    #####:   26:		if (state->discard[0][i] == estate) { score = score + 1; };
    #####:   27:		if (state->discard[0][i] == duchy) { score = score + 3; };
    #####:   28:		if (state->discard[0][i] == province) { score = score + 6; };
    #####:   29:		if (state->discard[0][i] == great_hall) { score = score + 1; };
    #####:   30:		if (state->discard[0][i] == gardens) { score = score + ( fullDeckCount(0, 0, state) / 10 ); };
        -:   31:	}
        -:   32:
        -:   33:	//score from deck
        1:   34:	for (i = 0; i < state->deckCount[0]; i++)
        -:   35:	{
    #####:   36:		if (state->deck[0][i] == curse) { score = score - 1; };
    #####:   37:		if (state->deck[0][i] == estate) { score = score + 1; };
    #####:   38:		if (state->deck[0][i] == duchy) { score = score + 3; };
    #####:   39:		if (state->deck[0][i] == province) { score = score + 6; };
    #####:   40:		if (state->deck[0][i] == great_hall) { score = score + 1; };
    #####:   41:		if (state->deck[0][i] == gardens) { score = score + ( fullDeckCount(0, 0, state) / 10 ); };
        -:   42:	}
        -:   43:
        1:   44:	test = scoreFor (0, state);
        1:   45:	anassert(test==score);
        1:   46:}
