        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1860:    8:int compare(const void* a, const void* b) {
     1860:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     1860:   11:  if (*(int*)a < *(int*)b)
      496:   12:    return -1;
     1364:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      100:   44:  SelectStream(1);
      100:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
       50:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       50:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      550:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     5500:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     5000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       50:   73:  if (numPlayers == 2)
        -:   74:    {
       26:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       24:   77:  else if (numPlayers == 3)
        -:   78:    {
       24:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       50:   87:  if (numPlayers == 2)
        -:   88:    {
       26:   89:      state->supplyCount[estate] = 8;
       26:   90:      state->supplyCount[duchy] = 8;
       26:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       24:   95:      state->supplyCount[estate] = 12;
       24:   96:      state->supplyCount[duchy] = 12;
       24:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       50:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       50:  102:  state->supplyCount[silver] = 40;
       50:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1050:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     8250:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     7750:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      500:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      100:  115:		  if (numPlayers == 2){ 
       26:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       24:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      450:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      500:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     7250:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      174:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      124:  140:      state->deckCount[i] = 0;
      496:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      372:  143:	  state->deck[i][j] = estate;
      372:  144:	  state->deckCount[i]++;
        -:  145:	}
      992:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      868:  148:	  state->deck[i][j] = copper;
      868:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      174:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      124:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      174:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      124:  166:      state->handCount[i] = 0;
      124:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1400:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1350:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       50:  182:  state->outpostPlayed = 0;
       50:  183:  state->phase = 0;
       50:  184:  state->numActions = 1;
       50:  185:  state->numBuys = 1;
       50:  186:  state->playedCardCount = 0;
       50:  187:  state->whoseTurn = 0;
       50:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      300:  192:  for (it = 0; it < 5; it++){
      250:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       50:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       50:  198:  return 0;
        -:  199:}
        -:  200:
      124:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      124:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      124:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      124:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1488:  214:  while (state->deckCount[player] > 0) {
     1240:  215:    card = floor(Random() * state->deckCount[player]);
     1240:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1240:  217:    newDeckPos++;
     3724:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     2484:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1240:  221:    state->deckCount[player]--;
        -:  222:  }
     1364:  223:  for (i = 0; i < newDeckPos; i++) {
     1240:  224:    state->deck[player][i] = newDeck[i];
     1240:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      124:  228:  return 0;
        -:  229:}
        -:  230:
      100:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      100:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      100:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      100:  243:  if ( state->numActions < 1 )
        -:  244:    {
       50:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       50:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       50:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       50:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       50:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       50:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       50:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       50:  315:int handCard(int handPos, struct gameState *state) {
       50:  316:  int currentPlayer = whoseTurn(state);
       50:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      100:  346:int whoseTurn(struct gameState *state) {
      100:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      400:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      400:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      400:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      400:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      400:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      400:  576:    state->deckCount[player]--;
      400:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      400:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://Assignment 1 starts here
        -:  647:
       50:  648:void card_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:  649:{
        -:  650:	int i;
        -:  651:
        -:  652:	//+3 Cards
      200:  653:	for (i = 0; i < 3; i++)
        -:  654:	{
      150:  655:		drawCard(currentPlayer, state);
        -:  656:	}
        -:  657:			
        -:  658:	
       50:  659:}
        -:  660:
    #####:  661:void card_village(int currentPlayer, struct gameState *state, int handPos)
        -:  662:{
        -:  663:	//+1 Card
    #####:  664:	drawCard(currentPlayer, state);
        -:  665:			
        -:  666:	//+2 Actions
    #####:  667:	state->numActions = state->numActions - 2;
        -:  668:			
        -:  669:	//discard played card from hand
    #####:  670:	discardCard(handPos, currentPlayer, state, 0);
    #####:  671:}
        -:  672:
    #####:  673:void card_greathall(int currentPlayer, struct gameState *state, int handPos)
        -:  674:{
        -:  675:	//+1 Card
    #####:  676:	drawCard(currentPlayer, state);
        -:  677:			
        -:  678:	//+1 Actions
    #####:  679:	state->numActions++;
        -:  680:			
        -:  681:	//discard card from hand
    #####:  682:	discardCard(handPos, currentPlayer, state, 0);
    #####:  683:}
        -:  684:
    #####:  685:void card_outpost(int currentPlayer, struct gameState *state, int handPos)
        -:  686:{
        -:  687:	//set outpost flag
    #####:  688:	state->outpostPlayed++;
        -:  689:			
        -:  690:	//discard card
    #####:  691:	discardCard(handPos, currentPlayer, state, 0);
    #####:  692:}
        -:  693:
    #####:  694:void card_seahag(int currentPlayer, struct gameState *state, int curse)
        -:  695:{
        -:  696:	int i;
    #####:  697:	for (i = 0; i < state->numPlayers; i++){
    #####:  698:		if (i != currentPlayer){
    #####:  699:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  700:			state->discardCount[i]++;
    #####:  701:		state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  702:		}
        -:  703:	}
    #####:  704:}
        -:  705:
        -:  706://Bad Function Fix Me
       50:  707:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  708:{
        -:  709:  int i;
        -:  710:  int j;
        -:  711:  int k;
        -:  712:  int x;
        -:  713:  int index;
       50:  714:  int currentPlayer = whoseTurn(state);
       50:  715:  int nextPlayer = currentPlayer + 1;
        -:  716:
       50:  717:  int tributeRevealedCards[2] = {-1, -1};
        -:  718:  int temphand[MAX_HAND];// moved above the if statement
       50:  719:  int drawntreasure=0;
        -:  720:  int cardDrawn;
       50:  721:  int z = 0;// this is the counter for the temp hand
       50:  722:  if (nextPlayer > (state->numPlayers - 1)){
       50:  723:    nextPlayer = 0;
        -:  724:  }
        -:  725:  
        -:  726:	
        -:  727:  //uses switch to select card and perform actions
       50:  728:  switch( card ) 
        -:  729:    {
        -:  730:    case adventurer:
    #####:  731:      while(drawntreasure<2){
    #####:  732:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  733:	  shuffle(currentPlayer, state);
        -:  734:	}
    #####:  735:	drawCard(currentPlayer, state);
    #####:  736:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  737:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  738:	  drawntreasure++;
        -:  739:	else{
    #####:  740:	  temphand[z]=cardDrawn;
    #####:  741:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  742:	  z++;
        -:  743:	}
        -:  744:      }
    #####:  745:      while(z-1>=0){
    #####:  746:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  747:	z=z-1;
        -:  748:      }
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case council_room:
        -:  752:      //+4 Cards
    #####:  753:      for (i = 0; i < 4; i++)
        -:  754:	{
    #####:  755:	  drawCard(currentPlayer, state);
        -:  756:	}
        -:  757:			
        -:  758:      //+1 Buy
    #####:  759:      state->numBuys++;
        -:  760:			
        -:  761:      //Each other player draws a card
    #####:  762:      for (i = 0; i < state->numPlayers; i++)
        -:  763:	{
    #####:  764:	  if ( i != currentPlayer )
        -:  765:	    {
    #####:  766:	      drawCard(i, state);
        -:  767:	    }
        -:  768:	}
        -:  769:			
        -:  770:      //put played card in played card pile
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
        -:  772:			
    #####:  773:      return 0;
        -:  774:			
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
    #####:  788:	if (supplyCount(choice1, state) <= 0){
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    #####:  797:	  printf("That card is too expensive!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  810:	  x = 0;//No more buying cards
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }     
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:      			
    #####:  826:      return 0;
        -:  827:			
        -:  828:    case gardens:
    #####:  829:      return -1;
        -:  830:			
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:		
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:			
    #####:  864:      return 0;
        -:  865:			
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);			
    #####:  885:	      break;
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
        -:  891:		
        -:  892:    case smithy:
        -:  893:	//Assignment 1 refactored. Implamentation above
       50:  894:	card_smithy(currentPlayer, state, handPos);
       50:  895:      return 0;
        -:  896:		
        -:  897:    case village:
        -:  898:	//Assignment 1 refactored.
    #####:  899:      	card_village(currentPlayer, state, handPos);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case baron:
    #####:  903:      state->numBuys++;//Increase buys by 1!
    #####:  904:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  905:	int p = 0;//Iterator for hand!
    #####:  906:	int card_not_discarded = 1;//Flag for discard set!
    #####:  907:	while(card_not_discarded){
    #####:  908:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  909:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  910:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  911:	    state->discardCount[currentPlayer]++;
    #####:  912:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  913:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  914:	    }
    #####:  915:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  916:	    state->handCount[currentPlayer]--;
    #####:  917:	    card_not_discarded = 0;//Exit the loop
        -:  918:	  }
    #####:  919:	  else if (p > state->handCount[currentPlayer]){
        -:  920:	    if(DEBUG) {
        -:  921:	      printf("No estate cards in your hand, invalid choice\n");
        -:  922:	      printf("Must gain an estate if there are any\n");
        -:  923:	    }
    #####:  924:	    if (supplyCount(estate, state) > 0){
    #####:  925:	      gainCard(estate, state, 0, currentPlayer);
    #####:  926:	      state->supplyCount[estate]--;//Decrement estates
    #####:  927:	      if (supplyCount(estate, state) == 0){
    #####:  928:		isGameOver(state);
        -:  929:	      }
        -:  930:	    }
    #####:  931:	    card_not_discarded = 0;//Exit the loop
        -:  932:	  }
        -:  933:			    
        -:  934:	  else{
    #####:  935:	    p++;//Next card
        -:  936:	  }
        -:  937:	}
        -:  938:      }
        -:  939:			    
        -:  940:      else{
    #####:  941:	if (supplyCount(estate, state) > 0){
    #####:  942:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  943:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  944:	  if (supplyCount(estate, state) == 0){
    #####:  945:	    isGameOver(state);
        -:  946:	  }
        -:  947:	}
        -:  948:      }
        -:  949:	    
        -:  950:      
    #####:  951:      return 0;
        -:  952:		
        -:  953:    case great_hall:
        -:  954:	//Assignment 1
    #####:  955:      card_greathall(currentPlayer, state, handPos);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:	//Assignment 1
    #####: 1203:	card_outpost( currentPlayer, state, handPos);
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
        -: 1223:	//Assignment 1
    #####: 1224:	card_seahag(currentPlayer, state, curse);
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1231:	{
    #####: 1232:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1233:	    {
    #####: 1234:	      index = i;
    #####: 1235:	      break;
        -: 1236:	    }
        -: 1237:	}
    #####: 1238:      if (index > -1)
        -: 1239:	{
        -: 1240:	  //trash both treasure cards
    #####: 1241:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1242:	  discardCard(index, currentPlayer, state, 1);
        -: 1243:
        -: 1244:	  //gain 4 Gold cards
    #####: 1245:	  for (i = 0; i < 4; i++)
        -: 1246:	    {
    #####: 1247:	      gainCard(gold, state, 1, currentPlayer);
        -: 1248:	    }
        -: 1249:				
        -: 1250:	  //return success
    #####: 1251:	  return 1;
        -: 1252:	}
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
        -: 1256:    }
        -: 1257:	
    #####: 1258:  return -1;
        -: 1259:}
        -: 1260:
    #####: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
    #####: 1265:  if (trashFlag < 1)
        -: 1266:    {
        -: 1267:      //add card to played pile
    #####: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1269:      state->playedCardCount++;
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
    #####: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
    #####: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
    #####: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
    #####: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
    #####: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
    #####: 1296:  return 0;
        -: 1297:}
        -: 1298:
    #####: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1304:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
    #####: 1314:  if (toFlag == 1)
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
        -: 1318:    }
    #####: 1319:  else if (toFlag == 2)
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
    #####: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
    #####: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
    #####: 1333:  return 0;
        -: 1334:}
        -: 1335:
      100: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
      100: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
    14995: 1344:  for (i = 0; i < state->handCount[player]; i++)
        -: 1345:    {
    14895: 1346:      if (state->hand[player][i] == copper)
        -: 1347:	{
      166: 1348:	  state->coins += 1;
        -: 1349:	}
    14729: 1350:      else if (state->hand[player][i] == silver)
        -: 1351:	{
    #####: 1352:	  state->coins += 2;
        -: 1353:	}
    14729: 1354:      else if (state->hand[player][i] == gold)
        -: 1355:	{
    #####: 1356:	  state->coins += 3;
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
      100: 1361:  state->coins += bonus;
        -: 1362:
      100: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
